// Code generated by inspc. DO NOT EDIT.
// source: github.com/koykov/dyntpl/testobj

package testobj_ins

import (
	"github.com/koykov/dyntpl/testobj"
	"github.com/koykov/inspector"
	"strconv"
)

type BenchRowsInspector struct {
	inspector.BaseInspector
}

func (i1 *BenchRowsInspector) Get(src interface{}, path ...string) (interface{}, error) {
	var buf interface{}
	err := i1.GetTo(src, &buf, path...)
	return buf, err
}

func (i1 *BenchRowsInspector) GetTo(src interface{}, buf *interface{}, path ...string) (err error) {
	if src == nil {
		return
	}
	var x *testobj.BenchRows
	_ = x
	if p, ok := src.(**testobj.BenchRows); ok {
		x = *p
	} else if p, ok := src.(*testobj.BenchRows); ok {
		x = p
	} else if v, ok := src.(testobj.BenchRows); ok {
		x = &v
	} else {
		return
	}
	if len(path) == 0 {
		*buf = &(*x)
		return
	}

	if len(path) > 0 {
		if path[0] == "Rows" {
			x0 := x.Rows
			_ = x0
			if len(path) > 1 {
				var i int
				t3, err3 := strconv.ParseInt(path[1], 0, 0)
				if err3 != nil {
					return err3
				}
				i = int(t3)
				if len(x0) > i {
					x1 := &(x0)[i]
					_ = x1
					if len(path) > 2 {
						if path[2] == "ID" {
							*buf = &x1.ID
							return
						}
						if path[2] == "Message" {
							*buf = &x1.Message
							return
						}
						if path[2] == "Print" {
							*buf = &x1.Print
							return
						}
					}
					*buf = x1
				}
			}
			*buf = &x.Rows
			return
		}
	}
	return
}

func (i1 *BenchRowsInspector) Cmp(src interface{}, cond inspector.Op, right string, result *bool, path ...string) (err error) {
	if len(path) == 0 {
		return
	}
	if src == nil {
		return
	}
	var x *testobj.BenchRows
	_ = x
	if p, ok := src.(**testobj.BenchRows); ok {
		x = *p
	} else if p, ok := src.(*testobj.BenchRows); ok {
		x = p
	} else if v, ok := src.(testobj.BenchRows); ok {
		x = &v
	} else {
		return
	}

	if len(path) > 0 {
		if path[0] == "Rows" {
			x0 := x.Rows
			_ = x0
			if len(path) > 1 {
				var i int
				t4, err4 := strconv.ParseInt(path[1], 0, 0)
				if err4 != nil {
					return err4
				}
				i = int(t4)
				if len(x0) > i {
					x1 := &(x0)[i]
					_ = x1
					if len(path) > 2 {
						if path[2] == "ID" {
							var rightExact int
							t5, err5 := strconv.ParseInt(right, 0, 0)
							if err5 != nil {
								return err5
							}
							rightExact = int(t5)
							switch cond {
							case inspector.OpEq:
								*result = x1.ID == rightExact
							case inspector.OpNq:
								*result = x1.ID != rightExact
							case inspector.OpGt:
								*result = x1.ID > rightExact
							case inspector.OpGtq:
								*result = x1.ID >= rightExact
							case inspector.OpLt:
								*result = x1.ID < rightExact
							case inspector.OpLtq:
								*result = x1.ID <= rightExact
							}
							return
						}
						if path[2] == "Message" {
							var rightExact string
							rightExact = right

							switch cond {
							case inspector.OpEq:
								*result = x1.Message == rightExact
							case inspector.OpNq:
								*result = x1.Message != rightExact
							case inspector.OpGt:
								*result = x1.Message > rightExact
							case inspector.OpGtq:
								*result = x1.Message >= rightExact
							case inspector.OpLt:
								*result = x1.Message < rightExact
							case inspector.OpLtq:
								*result = x1.Message <= rightExact
							}
							return
						}
						if path[2] == "Print" {
							var rightExact bool
							t7, err7 := strconv.ParseBool(right)
							if err7 != nil {
								return err7
							}
							rightExact = bool(t7)
							if cond == inspector.OpEq {
								*result = x1.Print == rightExact
							} else {
								*result = x1.Print != rightExact
							}
							return
						}
					}
				}
			}
		}
	}
	return
}

func (i1 *BenchRowsInspector) Loop(src interface{}, l inspector.Looper, buf *[]byte, path ...string) (err error) {
	if len(path) == 0 {
		return
	}
	if src == nil {
		return
	}
	var x *testobj.BenchRows
	_ = x
	if p, ok := src.(**testobj.BenchRows); ok {
		x = *p
	} else if p, ok := src.(*testobj.BenchRows); ok {
		x = p
	} else if v, ok := src.(testobj.BenchRows); ok {
		x = &v
	} else {
		return
	}

	if len(path) > 0 {
		if path[0] == "Rows" {
			x0 := x.Rows
			_ = x0
			for k := range x0 {
				if l.RequireKey() {
					*buf = strconv.AppendInt((*buf)[:0], int64(k), 10)
					l.SetKey(buf, &inspector.StaticInspector{})
				}
				l.SetVal(&(x0)[k], &BenchRowInspector{})
				ctl := l.Iterate()
				if ctl == inspector.LoopCtlBrk {
					break
				}
				if ctl == inspector.LoopCtlCnt {
					continue
				}
			}
			return
		}
	}
	return
}

func (i1 *BenchRowsInspector) SetWB(dst, value interface{}, buf inspector.AccumulativeBuffer, path ...string) error {
	if len(path) == 0 {
		return nil
	}
	if dst == nil {
		return nil
	}
	var x *testobj.BenchRows
	_ = x
	if p, ok := dst.(**testobj.BenchRows); ok {
		x = *p
	} else if p, ok := dst.(*testobj.BenchRows); ok {
		x = p
	} else if v, ok := dst.(testobj.BenchRows); ok {
		x = &v
	} else {
		return nil
	}

	if len(path) > 0 {
		if path[0] == "Rows" {
			x0 := x.Rows
			if uvalue, ok := value.(*[]testobj.BenchRow); ok {
				x0 = *uvalue
			}
			if x0 == nil {
				z := make([]testobj.BenchRow, 0)
				x0 = z
				x.Rows = x0
			}
			_ = x0
			if len(path) > 1 {
				var i int
				t8, err8 := strconv.ParseInt(path[1], 0, 0)
				if err8 != nil {
					return err8
				}
				i = int(t8)
				if len(x0) > i {
					x1 := &(x0)[i]
					_ = x1
					if len(path) > 2 {
						if path[2] == "ID" {
							inspector.AssignBuf(&x1.ID, value, buf)
							return nil
						}
						if path[2] == "Message" {
							inspector.AssignBuf(&x1.Message, value, buf)
							return nil
						}
						if path[2] == "Print" {
							inspector.AssignBuf(&x1.Print, value, buf)
							return nil
						}
					}
					(x0)[i] = *x1
					return nil
				}
			}
			x.Rows = x0
		}
	}
	return nil
}

func (i1 *BenchRowsInspector) Set(dst, value interface{}, path ...string) error {
	return i1.SetWB(dst, value, nil, path...)
}
